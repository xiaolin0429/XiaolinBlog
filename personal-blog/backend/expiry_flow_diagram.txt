Cookie有效期管理流程图
========================

用户登录
   ↓
┌─────────────────────────────────────────────────────────────┐
│                    服务器设置三层过期机制                      │
├─────────────────────────────────────────────────────────────┤
│ 1. 浏览器Cookie (24小时)                                     │
│    response.set_cookie(max_age=86400)                      │
│    ↓                                                       │
│ 2. JWT Token (30分钟)                                       │
│    {"exp": timestamp, "sub": user_id, "session_id": "..."}  │
│    ↓                                                       │
│ 3. Redis Session (24小时)                                   │
│    redis.setex("session:xxx", 86400, session_data)        │
└─────────────────────────────────────────────────────────────┘
   ↓
用户后续请求
   ↓
┌─────────────────────────────────────────────────────────────┐
│                    三层验证流程                              │
├─────────────────────────────────────────────────────────────┤
│ 第1层：浏览器检查                                            │
│ Cookie存在且未过期? ──No──→ 401 Unauthorized                │
│         │Yes                                               │
│         ↓                                                  │
│ 第2层：JWT验证                                               │
│ jwt.decode() 自动检查exp ──过期──→ 401 Token Expired        │
│         │有效                                               │
│         ↓                                                  │
│ 第3层：Session验证                                           │
│ Redis TTL检查 ──过期/不存在──→ 401 Session Expired          │
│         │有效                                               │
│         ↓                                                  │
│ 第4层：用户验证                                              │
│ 数据库用户状态检查 ──无效──→ 401 User Invalid               │
│         │有效                                               │
│         ↓                                                  │
│    ✅ 请求成功                                              │
└─────────────────────────────────────────────────────────────┘

自动过期机制
============

浏览器Cookie过期:
- 浏览器自动删除Cookie
- 下次请求无Cookie → 第1层验证失败

JWT Token过期:
- jwt.decode()抛出JWTError
- 第2层验证失败 → 需要重新登录

Redis Session过期:
- Redis TTL到期自动删除
- session_manager.validate_session()返回False
- 第3层验证失败 → 需要重新登录

优势总结
========
✅ 无需Cookie表：三层自动过期机制
✅ 高性能：内存操作，无数据库查询
✅ 高安全：多层验证，防止各种攻击
✅ 易维护：自动清理，无需定时任务
✅ 可扩展：无状态设计，支持集群部署