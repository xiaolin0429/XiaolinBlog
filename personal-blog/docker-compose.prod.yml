version: '3.8'

services:
  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: blog_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/ssl:/etc/nginx/ssl
      - ./frontend/public:/var/www/static
    depends_on:
      - frontend
      - backend
    networks:
      - blog_network
    restart: unless-stopped

  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: blog_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - blog_network
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: blog_redis_prod
    volumes:
      - redis_prod_data:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - blog_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blog_backend_prod
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - blog_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery异步任务处理
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blog_celery_prod
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - blog_network
    restart: unless-stopped

  # Celery Beat定时任务
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blog_celery_beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - blog_network
    restart: unless-stopped

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: blog_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=https://yourdomain.com/api
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - blog_network
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  blog_network:
    driver: bridge